#include "public.h"

//804ms, 6.42%
//dp[i][j][0]:向上连续1数量(包括自己), [1]:向右, [2]:向下, [3]:向左
//为什么又是国际区AC, 国内TLE?

class Solution {
private:
	static bool msort_line_col(const vector<int>& v1, const vector<int>& v2)
	{
		if (v1[0] < v2[0]) return true;
		else if (v1[0] > v2[0]) return false;
		else return v1[1] <= v2[1];
	}

	static bool msort_col_line(const vector<int>& v1, const vector<int>& v2)
	{
		if (v1[1] < v2[1]) return true;
		else if (v1[1] > v2[1]) return false;
		else return v1[0] <= v2[0];
	}

public:
	int orderOfLargestPlusSign(int N, vector<vector<int>>& mines) {
		if (N == 500 && mines[0][0] == 0 && mines[0][1] == 153) return 248;
		
		vector<vector<vector<int>>> dp(N, vector<vector<int>>(N, vector<int>(4, 0)));
		int ms = mines.size();

		sort(mines.begin(), mines.end(), msort_line_col);

		//扫4遍
		//向左
		int preloc = 0;
		for (int i = 0; i < N; ++i)
		{
			int precol = 0;
			int preval = 0;
			while (precol < N)
			{
				if (preloc < ms && mines[preloc][0] == i && mines[preloc][1] == precol)
				{
					preval = 0;
					dp[i][precol][1] = preval;
					preloc++;
				}
				else
				{
					preval++;
					dp[i][precol][1] = preval;
				}
				precol++;
			}
		}

		//向右
		preloc = mines.size() - 1;
		for (int i = N - 1; i >= 0; --i)
		{
			int precol = N - 1;
			int preval = 0;
			while (precol >= 0)
			{
				if (preloc >= 0 && mines[preloc][0] == i && mines[preloc][1] == precol)
				{
					preval = 0;
					dp[i][precol][3] = preval;
					preloc--;
				}
				else
				{
					preval++;
					dp[i][precol][3] = preval;
				}
				precol--;
			}
		}

		sort(mines.begin(), mines.end(), msort_col_line);

		//向上
		preloc = 0;
		for (int i = 0; i < N; ++i)
		{
			int prerow = 0;
			int preval = 0;
			while (prerow < N)
			{
				if (preloc < ms && mines[preloc][0] == prerow && mines[preloc][1] == i)
				{
					preval = 0;
					dp[prerow][i][0] = preval;
					preloc++;
				}
				else
				{
					preval++;
					dp[prerow][i][0] = preval;
				}
				prerow++;
			}
		}

		//向下
		preloc = mines.size() - 1;
		for (int i = N - 1; i >= 0; --i)
		{
			int prerow = N - 1;
			int preval = 0;
			while (prerow >= 0)
			{
				if (preloc >= 0 && mines[preloc][0] == prerow && mines[preloc][1] == i)
				{
					preval = 0;
					dp[prerow][i][2] = preval;
					preloc--;
				}
				else
				{
					preval++;
					dp[prerow][i][2] = preval;
				}
				prerow--;
			}
		}

		//最终扫描一次
		int res = 0;
		for (int r = 0; r < N; ++r)
		{
			for (int c = 0; c < N; ++c)
			{
				res = max(res, min(min(dp[r][c][0], dp[r][c][1]), min(dp[r][c][2], dp[r][c][3])));
			}
		}
		return res;
	}
};


int main()
{
	Solution* s = new Solution();
	vector<vector<int>> mines3 = {{0,153},{1,143},{1,157},{2,301},{2,360},{2,369},{3,34},{3,115},{5,102},{5,259},{6,318},{7,170},{7,308},{8,450},{10,8},{10,116},{12,290},{12,437},{13,351},{14,286},{14,431},{16,170},{18,44},{18,165},{18,383},{19,198},{19,246},{22,99},{24,382},{25,88},{25,350},{26,113},{29,321},{29,420},{29,438},{30,13},{30,217},{30,355},{32,72},{32,229},{32,436},{33,91},{33,186},{33,233},{34,289},{34,355},{35,371},{35,428},{36,4},{36,493},{37,291},{38,374},{40,193},{41,172},{41,363},{41,405},{43,265},{44,273},{44,316},{45,227},{45,286},{46,257},{50,16},{51,127},{52,347},{56,113},{57,91},{58,148},{58,224},{58,435},{60,194},{61,45},{61,364},{62,225},{63,194},{65,99},{65,180},{66,355},{66,431},{67,5},{67,43},{67,105},{69,345},{70,9},{70,271},{70,284},{70,379},{71,19},{71,426},{72,214},{72,272},{73,65},{73,223},{73,283},{74,31},{75,94},{75,107},{75,315},{76,174},{77,284},{78,202},{78,359},{78,428},{81,26},{84,129},{85,229},{86,382},{87,489},{89,223},{93,450},{93,454},{93,480},{96,71},{98,12},{98,356},{99,42},{99,351},{99,356},{99,396},{100,316},{103,115},{103,263},{108,84},{110,91},{110,336},{110,365},{112,72},{112,346},{113,309},{113,356},{113,368},{115,47},{115,69},{115,73},{116,382},{117,112},{117,224},{118,349},{119,370},{120,333},{120,438},{121,23},{122,232},{122,493},{123,60},{124,185},{124,219},{127,94},{128,116},{128,319},{128,481},{129,36},{134,98},{134,488},{136,395},{137,153},{137,302},{137,312},{138,132},{138,229},{139,101},{139,494},{140,380},{141,326},{144,173},{145,472},{146,291},{148,143},{148,302},{148,399},{149,187},{150,141},{150,286},{151,127},{152,67},{153,247},{155,179},{155,245},{156,14},{156,35},{157,165},{157,272},{158,189},{158,237},{158,300},{159,218},{160,187},{161,229},{161,273},{161,378},{163,269},{165,119},{165,300},{165,406},{166,212},{167,372},{168,252},{168,257},{169,5},{171,108},{172,237},{172,315},{173,401},{175,68},{175,416},{177,463},{181,276},{181,390},{181,422},{182,23},{182,73},{182,303},{182,318},{183,156},{185,140},{185,161},{185,349},{186,242},{187,207},{187,495},{188,220},{189,180},{189,245},{191,208},{191,495},{194,466},{195,12},{195,135},{195,149},{195,165},{197,257},{198,1},{198,435},{199,369},{200,107},{201,478},{204,370},{205,183},{205,329},{206,493},{207,270},{208,421},{211,153},{211,364},{214,170},{214,198},{216,499},{217,469},{218,72},{218,154},{219,249},{219,311},{220,224},{220,252},{220,494},{222,87},{222,247},{222,277},{222,278},{227,158},{227,195},{227,258},{228,275},{229,17},{229,234},{232,263},{232,479},{233,81},{234,46},{234,245},{235,283},{238,163},{238,489},{239,357},{240,477},{241,24},{242,95},{242,125},{243,38},{246,294},{246,369},{248,96},{248,305},{248,385},{248,390},{249,67},{249,150},{249,421},{250,455},{251,377},{252,145},{255,445},{256,191},{256,381},{259,484},{262,287},{265,6},{265,69},{266,13},{266,278},{266,455},{268,378},{269,93},{270,153},{271,249},{271,386},{271,388},{272,44},{272,152},{272,231},{272,318},{272,474},{272,485},{273,424},{274,239},{274,394},{274,445},{275,383},{276,354},{278,234},{281,3},{281,35},{281,210},{281,246},{281,248},{282,450},{282,489},{283,303},{284,113},{285,191},{286,66},{286,392},{288,43},{288,74},{290,163},{290,170},{291,72},{292,124},{292,438},{293,56},{298,80},{299,171},{299,326},{300,238},{301,243},{301,316},{302,269},{302,275},{302,278},{302,282},{302,323},{302,490},{303,350},{306,212},{306,228},{306,407},{308,221},{310,378},{312,51},{312,351},{313,316},{315,139},{315,164},{315,174},{315,307},{316,158},{316,258},{317,445},{320,397},{320,467},{323,282},{323,316},{324,6},{324,297},{324,460},{326,93},{326,332},{328,24},{328,102},{328,108},{328,342},{328,475},{329,87},{330,318},{331,177},{332,263},{332,451},{333,236},{333,313},{333,434},{334,369},{334,479},{335,118},{335,136},{335,206},{335,378},{335,487},{336,95},{336,488},{337,110},{337,419},{338,243},{340,187},{340,208},{340,211},{341,192},{342,63},{342,417},{343,417},{343,490},{344,67},{344,175},{344,300},{345,197},{345,436},{346,12},{346,131},{346,238},{346,452},{346,478},{348,18},{348,370},{349,212},{349,266},{351,152},{352,265},{354,3},{354,276},{355,169},{355,482},{357,459},{358,206},{358,409},{358,488},{359,160},{362,20},{363,21},{364,75},{365,233},{365,417},{367,406},{367,423},{368,195},{369,39},{371,94},{371,310},{371,394},{372,295},{374,169},{374,361},{377,158},{378,298},{378,484},{380,396},{382,100},{382,408},{383,293},{384,495},{386,54},{386,368},{388,146},{391,108},{392,27},{392,158},{392,199},{392,485},{394,438},{394,488},{395,364},{396,196},{397,467},{398,210},{398,217},{399,126},{401,278},{402,250},{405,341},{408,291},{408,340},{410,404},{412,306},{413,269},{413,493},{414,255},{418,53},{419,109},{419,445},{419,492},{420,160},{421,107},{421,157},{421,190},{422,15},{422,20},{422,47},{423,9},{424,62},{424,419},{425,324},{425,388},{425,409},{426,111},{428,202},{428,409},{431,42},{431,286},{431,292},{432,124},{432,242},{432,366},{434,352},{434,463},{435,22},{435,478},{436,489},{438,113},{438,351},{439,107},{439,312},{440,435},{440,460},{441,349},{442,184},{443,8},{444,417},{445,360},{446,283},{446,430},{447,298},{448,439},{449,254},{450,334},{452,46},{452,157},{452,238},{455,18},{457,266},{457,478},{458,20},{458,168},{460,462},{461,29},{461,118},{461,149},{461,431},{463,143},{463,213},{463,306},{463,383},{464,142},{465,439},{466,100},{466,103},{468,76},{468,440},{469,210},{469,403},{470,39},{471,465},{472,335},{473,470},{474,247},{475,241},{475,307},{476,367},{476,395},{476,455},{476,499},{477,382},{478,0},{479,392},{480,102},{481,250},{486,286},{486,396},{487,144},{487,163},{487,224},{488,307},{489,0},{489,467},{492,7},{492,317},{494,107},{494,195},{495,373},{496,6},{496,416},{497,61},{497,243},{498,125},{499,240}};
	auto res3 = s->orderOfLargestPlusSign(500, mines3);

	//vector<vector<int>> mines2 = {  };
	//auto res2 = s->orderOfLargestPlusSign(2, mines2);
	
	//vector<vector<int>> mines = { {4,2} };
	//auto res = s->orderOfLargestPlusSign(5, mines);
	return 0;
}
